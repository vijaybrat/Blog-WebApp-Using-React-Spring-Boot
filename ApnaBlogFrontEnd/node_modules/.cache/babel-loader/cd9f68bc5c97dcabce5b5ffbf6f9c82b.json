{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Appliction\\\\Final Maven Project\\\\ApnaBlogFrontEnd\\\\src\\\\Pages\\\\LoginPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { login } from \"../lib/api\"; // Importing the login function from an API module\n\nimport LoginForm from \"../Components/Forms/LoginForm\"; // Importing LoginForm component\n\nimport AuthContext from \"../store/auth-context\"; // Importing AuthContext for authentication\n\nimport Banner from \"../Components/Banner\"; // Importing Banner component\n\nimport { useTranslation } from \"react-i18next\"; // Importing useTranslation for internationalization\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoginPage = props => {\n  _s();\n\n  const [isLoginSuccess, setIsLoginSuccess] = useState(false); // State to track login success\n\n  const [loginMessage, setLoginMessage] = useState(\"\"); // State to store login message\n\n  const authCtx = useContext(AuthContext); // Accessing authentication context\n\n  const {\n    t\n  } = useTranslation(); // Initializing translation hook\n  // Function to handle form submission\n\n  const onSubmit = (loginRequest, formikHelpers) => {\n    setTimeout(() => {\n      // Simulating asynchronous operation\n      login(loginRequest) // Calling login API function\n      .then(loginResponse => {\n        // Handling successful login response\n        setIsLoginSuccess(true); // Setting login success state to true\n\n        setLoginMessage(`${t(\"signedInAs\")} ${loginResponse.userName}`); // Setting login message\n\n        setTimeout(() => {\n          // Delaying authentication context update\n          authCtx.login(loginResponse); // Authenticating user\n        }, 2000);\n      }).catch(error => {\n        // Handling login error\n        if (error.message.includes(\"password\")) {\n          // Checking if error is related to password\n          formikHelpers.setFieldError(\"invalidPassword\", t(\"validation:invalidPassword\")); // Setting form field error for password\n        } else {\n          formikHelpers.setFieldError(\"invalidUsername\", t(\"validation:invalidUsername\")); // Setting form field error for username\n        }\n      }).finally(() => {\n        // Resetting form submission state\n        formikHelpers.setSubmitting(false);\n      });\n    }, 1000); // Simulated delay before API call\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"\",\n    style: {\n      marginTop: \"170px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-4 d-flex flex-column align-content-center\",\n      style: {\n        marginTop: props.headerHeight,\n        marginBottom: props.footerHeight\n      },\n      children: [/*#__PURE__*/_jsxDEV(LoginForm, {\n        isSubmitted: isLoginSuccess,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), \" \", isLoginSuccess &&\n      /*#__PURE__*/\n      // Rendering banner if login is successful\n      _jsxDEV(Banner, {\n        className: \"text-success border-success mt-4\",\n        message: loginMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LoginPage, \"5YOmp+XeGj2I1l2uKlTMEngE0p4=\", false, function () {\n  return [useTranslation];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useContext","useState","Container","Row","login","LoginForm","AuthContext","Banner","useTranslation","LoginPage","props","isLoginSuccess","setIsLoginSuccess","loginMessage","setLoginMessage","authCtx","t","onSubmit","loginRequest","formikHelpers","setTimeout","then","loginResponse","userName","catch","error","message","includes","setFieldError","finally","setSubmitting","marginTop","headerHeight","marginBottom","footerHeight"],"sources":["E:/React Appliction/Final Maven Project/ApnaBlogFrontEnd/src/Pages/LoginPage.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { login } from \"../lib/api\"; // Importing the login function from an API module\nimport LoginForm from \"../Components/Forms/LoginForm\"; // Importing LoginForm component\nimport AuthContext from \"../store/auth-context\"; // Importing AuthContext for authentication\nimport Banner from \"../Components/Banner\"; // Importing Banner component\nimport { useTranslation } from \"react-i18next\"; // Importing useTranslation for internationalization\n\nconst LoginPage = (props) => {\n  const [isLoginSuccess, setIsLoginSuccess] = useState(false); // State to track login success\n  const [loginMessage, setLoginMessage] = useState(\"\"); // State to store login message\n  const authCtx = useContext(AuthContext); // Accessing authentication context\n  const { t } = useTranslation(); // Initializing translation hook\n\n  // Function to handle form submission\n  const onSubmit = (loginRequest, formikHelpers) => {\n    setTimeout(() => { // Simulating asynchronous operation\n      login(loginRequest) // Calling login API function\n        .then((loginResponse) => { // Handling successful login response\n          setIsLoginSuccess(true); // Setting login success state to true\n          setLoginMessage(`${t(\"signedInAs\")} ${loginResponse.userName}`); // Setting login message\n          setTimeout(() => { // Delaying authentication context update\n            authCtx.login(loginResponse); // Authenticating user\n          }, 2000);\n        })\n        .catch((error) => { // Handling login error\n          if (error.message.includes(\"password\")) { // Checking if error is related to password\n            formikHelpers.setFieldError(\n              \"invalidPassword\",\n              t(\"validation:invalidPassword\")\n            ); // Setting form field error for password\n          } else {\n            formikHelpers.setFieldError(\n              \"invalidUsername\",\n              t(\"validation:invalidUsername\")\n            ); // Setting form field error for username\n          }\n        })\n        .finally(() => { // Resetting form submission state\n          formikHelpers.setSubmitting(false);\n        });\n    }, 1000); // Simulated delay before API call\n  };\n\n  return (\n    <Container className=\"\" style={{ marginTop: \"170px\" }}>\n      <Row\n        className=\"py-4 d-flex flex-column align-content-center\"\n        style={{\n          marginTop: props.headerHeight,\n          marginBottom: props.footerHeight,\n        }}\n      >\n        <LoginForm isSubmitted={isLoginSuccess} onSubmit={onSubmit} /> {/* Rendering login form */}\n        {isLoginSuccess && ( // Rendering banner if login is successful\n          <Banner\n            className=\"text-success border-success mt-4\"\n            message={loginMessage}\n          />\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default LoginPage;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,SAASC,KAAT,QAAsB,YAAtB,C,CAAoC;;AACpC,OAAOC,SAAP,MAAsB,+BAAtB,C,CAAuD;;AACvD,OAAOC,WAAP,MAAwB,uBAAxB,C,CAAiD;;AACjD,OAAOC,MAAP,MAAmB,sBAAnB,C,CAA2C;;AAC3C,SAASC,cAAT,QAA+B,eAA/B,C,CAAgD;;;;AAEhD,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAAA;;EAC3B,MAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,KAAD,CAApD,CAD2B,CACkC;;EAC7D,MAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD,CAF2B,CAE2B;;EACtD,MAAMc,OAAO,GAAGf,UAAU,CAACM,WAAD,CAA1B,CAH2B,CAGc;;EACzC,MAAM;IAAEU;EAAF,IAAQR,cAAc,EAA5B,CAJ2B,CAIK;EAEhC;;EACA,MAAMS,QAAQ,GAAG,CAACC,YAAD,EAAeC,aAAf,KAAiC;IAChDC,UAAU,CAAC,MAAM;MAAE;MACjBhB,KAAK,CAACc,YAAD,CAAL,CAAoB;MAApB,CACGG,IADH,CACSC,aAAD,IAAmB;QAAE;QACzBV,iBAAiB,CAAC,IAAD,CAAjB,CADuB,CACE;;QACzBE,eAAe,CAAE,GAAEE,CAAC,CAAC,YAAD,CAAe,IAAGM,aAAa,CAACC,QAAS,EAA9C,CAAf,CAFuB,CAE0C;;QACjEH,UAAU,CAAC,MAAM;UAAE;UACjBL,OAAO,CAACX,KAAR,CAAckB,aAAd,EADe,CACe;QAC/B,CAFS,EAEP,IAFO,CAAV;MAGD,CAPH,EAQGE,KARH,CAQUC,KAAD,IAAW;QAAE;QAClB,IAAIA,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAuB,UAAvB,CAAJ,EAAwC;UAAE;UACxCR,aAAa,CAACS,aAAd,CACE,iBADF,EAEEZ,CAAC,CAAC,4BAAD,CAFH,EADsC,CAInC;QACJ,CALD,MAKO;UACLG,aAAa,CAACS,aAAd,CACE,iBADF,EAEEZ,CAAC,CAAC,4BAAD,CAFH,EADK,CAIF;QACJ;MACF,CApBH,EAqBGa,OArBH,CAqBW,MAAM;QAAE;QACfV,aAAa,CAACW,aAAd,CAA4B,KAA5B;MACD,CAvBH;IAwBD,CAzBS,EAyBP,IAzBO,CAAV,CADgD,CA0BtC;EACX,CA3BD;;EA6BA,oBACE,QAAC,SAAD;IAAW,SAAS,EAAC,EAArB;IAAwB,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAb,CAA/B;IAAA,uBACE,QAAC,GAAD;MACE,SAAS,EAAC,8CADZ;MAEE,KAAK,EAAE;QACLA,SAAS,EAAErB,KAAK,CAACsB,YADZ;QAELC,YAAY,EAAEvB,KAAK,CAACwB;MAFf,CAFT;MAAA,wBAOE,QAAC,SAAD;QAAW,WAAW,EAAEvB,cAAxB;QAAwC,QAAQ,EAAEM;MAAlD;QAAA;QAAA;QAAA;MAAA,QAPF,OAQGN,cAAc;MAAA;MAAM;MACnB,QAAC,MAAD;QACE,SAAS,EAAC,kCADZ;QAEE,OAAO,EAAEE;MAFX;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD,CAvDD;;GAAMJ,S;UAIUD,c;;;KAJVC,S;AAyDN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}
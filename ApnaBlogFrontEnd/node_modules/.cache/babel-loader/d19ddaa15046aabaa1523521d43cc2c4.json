{"ast":null,"code":"// import React, { useContext, useEffect, useRef } from \"react\";\n// import { Card, Col, Form } from \"react-bootstrap\";\n// import SubmitButton from \"../SubmitButton\";\n// import AuthContext from \"../../store/auth-context\";\n// import { Formik } from \"formik\";\n// import * as Yup from \"yup\";\n// import { useTranslation } from \"react-i18next\";\n// const NewPostForm = ({ onSubmit, isSubmitted }) => {\n//   const textAreaRef = useRef(null);\n//   const authCtx = useContext(AuthContext);\n//   const { t } = useTranslation();\n//   useEffect(() => {\n//     textAreaRef.current.style.height = \"300px\";\n//   });\n//   return (\n//     <Formik\n//       initialValues={{\n//         title: \"\",\n//         content: \"\",\n//       }}\n//       validationSchema={Yup.object({\n//         title: Yup.string()\n//           .min(3, t(\"validation:atLeast\", { number: 3 }))\n//           .max(30, t(\"validation:lessThan\", { number: 30 }))\n//           .required(t(\"validation:required\")),\n//         content: Yup.string()\n//           .min(250, t(\"validation:atLeast\", { number: 250 }))\n//           .max(5000, t(\"validation:lessThan\", { number: 5000 }))\n//           .required(t(\"validation:required\")),\n//       })}\n//       onSubmit={onSubmit}\n//     >\n//       {(formik) => (\n//         <Col>\n//           <Card className=\"boxShadow\">\n//             <Card.Header className=\"fw-bold text-dark\">{`${t(\"newPostBy\")} ${\n//               authCtx.userName\n//             }`}</Card.Header>\n//             <Card.Body className=\"m-2 pb-3 border rounded-3\">\n//               <Form onSubmit={formik.handleSubmit}>\n//                 <Form.Group controlId=\"title\">\n//                   <Form.Label class=\"fw-bold text-dark mb-1\">{t(\"title\")}</Form.Label>\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder={t(\"enterNewPostHere\")}\n//                     name=\"title\"\n//                     onChange={formik.handleChange}\n//                     onBlur={formik.handleBlur}\n//                     value={formik.values.title}\n//                     disabled={isSubmitted}\n//                     isValid={\n//                       formik.touched.title &&\n//                       !formik.errors.title &&\n//                       formik.values.title\n//                     }\n//                     isInvalid={formik.touched.title && formik.errors.title}\n//                   ></Form.Control>\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     {formik.errors.title}\n//                   </Form.Control.Feedback>\n//                 </Form.Group>\n//                 <Form.Group className=\"my-2\" controlId=\"content\">\n//                   <Form.Label class=\"fw-bold text-dark mb-1\">{t(\"content\")}</Form.Label>\n//                   <Form.Control\n//                     type=\"text\"\n//                     name=\"content\"\n//                     onChange={formik.handleChange}\n//                     onBlur={formik.handleBlur}\n//                     value={formik.values.content}\n//                     disabled={isSubmitted}\n//                     isValid={\n//                       formik.touched.content &&\n//                       !formik.errors.content &&\n//                       formik.values.content\n//                     }\n//                     isInvalid={formik.touched.content && formik.errors.content}\n//                     ref={textAreaRef}\n//                     as=\"textarea\"\n//                     style={{ overflow: \"hidden\" }}\n//                   />\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     {formik.errors.content}\n//                   </Form.Control.Feedback>\n//                 </Form.Group>\n//                 <div className=\"d-flex justify-content-end\">\n//                   <SubmitButton\n//                     isSubmitted={isSubmitted}\n//                     isSubmitting={formik.isSubmitting}\n//                     name={t(\"addNewPost\")}\n//                   />\n//                 </div>\n//               </Form>\n//             </Card.Body>\n//           </Card>\n//         </Col>\n//       )}\n//     </Formik>\n//   );\n// };\n// export default NewPostForm;","map":{"version":3,"names":[],"sources":["E:/React Appliction/Running Apps/blog-frontend/src/Components/Forms/NewPostForm.js"],"sourcesContent":["// import React, { useContext, useEffect, useRef } from \"react\";\n// import { Card, Col, Form } from \"react-bootstrap\";\n// import SubmitButton from \"../SubmitButton\";\n// import AuthContext from \"../../store/auth-context\";\n// import { Formik } from \"formik\";\n// import * as Yup from \"yup\";\n// import { useTranslation } from \"react-i18next\";\n\n// const NewPostForm = ({ onSubmit, isSubmitted }) => {\n//   const textAreaRef = useRef(null);\n//   const authCtx = useContext(AuthContext);\n//   const { t } = useTranslation();\n\n//   useEffect(() => {\n//     textAreaRef.current.style.height = \"300px\";\n//   });\n//   return (\n//     <Formik\n//       initialValues={{\n//         title: \"\",\n//         content: \"\",\n//       }}\n//       validationSchema={Yup.object({\n//         title: Yup.string()\n//           .min(3, t(\"validation:atLeast\", { number: 3 }))\n//           .max(30, t(\"validation:lessThan\", { number: 30 }))\n//           .required(t(\"validation:required\")),\n//         content: Yup.string()\n//           .min(250, t(\"validation:atLeast\", { number: 250 }))\n//           .max(5000, t(\"validation:lessThan\", { number: 5000 }))\n//           .required(t(\"validation:required\")),\n//       })}\n//       onSubmit={onSubmit}\n//     >\n//       {(formik) => (\n//         <Col>\n//           <Card className=\"boxShadow\">\n//             <Card.Header className=\"fw-bold text-dark\">{`${t(\"newPostBy\")} ${\n//               authCtx.userName\n//             }`}</Card.Header>\n//             <Card.Body className=\"m-2 pb-3 border rounded-3\">\n//               <Form onSubmit={formik.handleSubmit}>\n//                 <Form.Group controlId=\"title\">\n//                   <Form.Label class=\"fw-bold text-dark mb-1\">{t(\"title\")}</Form.Label>\n//                   <Form.Control\n//                     type=\"text\"\n//                     placeholder={t(\"enterNewPostHere\")}\n//                     name=\"title\"\n//                     onChange={formik.handleChange}\n//                     onBlur={formik.handleBlur}\n//                     value={formik.values.title}\n//                     disabled={isSubmitted}\n//                     isValid={\n//                       formik.touched.title &&\n//                       !formik.errors.title &&\n//                       formik.values.title\n//                     }\n//                     isInvalid={formik.touched.title && formik.errors.title}\n//                   ></Form.Control>\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     {formik.errors.title}\n//                   </Form.Control.Feedback>\n//                 </Form.Group>\n\n//                 <Form.Group className=\"my-2\" controlId=\"content\">\n//                   <Form.Label class=\"fw-bold text-dark mb-1\">{t(\"content\")}</Form.Label>\n//                   <Form.Control\n//                     type=\"text\"\n//                     name=\"content\"\n//                     onChange={formik.handleChange}\n//                     onBlur={formik.handleBlur}\n//                     value={formik.values.content}\n//                     disabled={isSubmitted}\n//                     isValid={\n//                       formik.touched.content &&\n//                       !formik.errors.content &&\n//                       formik.values.content\n//                     }\n//                     isInvalid={formik.touched.content && formik.errors.content}\n//                     ref={textAreaRef}\n//                     as=\"textarea\"\n//                     style={{ overflow: \"hidden\" }}\n//                   />\n//                   <Form.Control.Feedback type=\"invalid\">\n//                     {formik.errors.content}\n//                   </Form.Control.Feedback>\n//                 </Form.Group>\n//                 <div className=\"d-flex justify-content-end\">\n//                   <SubmitButton\n//                     isSubmitted={isSubmitted}\n//                     isSubmitting={formik.isSubmitting}\n//                     name={t(\"addNewPost\")}\n//                   />\n//                 </div>\n//               </Form>\n//             </Card.Body>\n//           </Card>\n//         </Col>\n//       )}\n//     </Formik>\n//   );\n// };\n\n// export default NewPostForm;\n"],"mappings},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Appliction\\\\Final Maven Project\\\\ApnaBlogFrontEnd\\\\src\\\\Pages\\\\NewPostPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport NewPostForm from \"../Components/Forms/NewPostForm\"; // Importing a form component for creating a new post\n\nimport { submitNewPost } from \"../lib/api\"; // Importing a function for submitting a new post\n\nimport AuthContext from \"../store/auth-context\"; // Importing authentication context\n\nimport Banner from \"../Components/Banner\"; // Importing a banner component for displaying messages\n\nimport { useNavigate } from \"react-router-dom\"; // Importing a hook for navigation\n\nimport { useTranslation } from \"react-i18next\"; // Importing a hook for translation\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewPostPage = props => {\n  _s();\n\n  // State variables\n  const [isSubmitted, setIsSubmitted] = useState(false); // State for tracking if the form is submitted\n\n  const [newPostId, setNewPostId] = useState(null); // State for storing the ID of the newly created post\n  // Context and hooks\n\n  const authContext = useContext(AuthContext); // Accessing authentication context\n\n  const navigate = useNavigate(); // Getting the navigation function from React Router\n\n  const {\n    t\n  } = useTranslation(); // Using translation hook for internationalization\n  // Function to handle form submission\n\n  const onSubmit = (newPost, formikHelpers) => {\n    submitNewPost(newPost, authContext.token) // Calling the API function to submit new post\n    .then(post => {\n      setTimeout(() => {\n        setNewPostId(post.id); // Setting the ID of the newly created post\n\n        setIsSubmitted(true); // Setting form submission status to true\n      }, 2000);\n    }).catch(error => {\n      console.log(error); // Logging any errors that occur during submission\n    }).finally(() => {\n      setTimeout(() => {\n        formikHelpers.setSubmitting(false); // Resetting form submission status after submission attempt\n      }, 2000);\n    });\n  }; // Effect to navigate to the newly created post after submission\n\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (isSubmitted) {\n        setIsSubmitted(false); // Resetting form submission status\n\n        navigate(`/post/${newPostId}`); // Navigating to the newly created post\n      }\n    }, 2000); // Delaying navigation for 2 seconds\n  }, [isSubmitted]); // Running effect when isSubmitted state changes\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-4 d-flex flex-column justify-content-center\",\n      style: {\n        marginTop: props.headerHeight,\n        // Using props to adjust top margin based on header height\n        marginBottom: props.footerHeight // Using props to adjust bottom margin based on footer height\n\n      },\n      children: [/*#__PURE__*/_jsxDEV(NewPostForm, {\n        isSubmitted: isSubmitted,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), isSubmitted && /*#__PURE__*/_jsxDEV(Banner, {\n        className: \"text-success border-success mt-4\",\n        message: `${t(\"addedBy\", {\n          type: \"post\"\n        })} ${authContext.userName}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewPostPage, \"KFjSZZ47XDynP0apDsZtzubvNm4=\", false, function () {\n  return [useNavigate, useTranslation];\n});\n\n_c = NewPostPage;\nexport default NewPostPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPostPage\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Container","Row","NewPostForm","submitNewPost","AuthContext","Banner","useNavigate","useTranslation","NewPostPage","props","isSubmitted","setIsSubmitted","newPostId","setNewPostId","authContext","navigate","t","onSubmit","newPost","formikHelpers","token","then","post","setTimeout","id","catch","error","console","log","finally","setSubmitting","marginTop","headerHeight","marginBottom","footerHeight","type","userName"],"sources":["E:/React Appliction/Final Maven Project/ApnaBlogFrontEnd/src/Pages/NewPostPage.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport NewPostForm from \"../Components/Forms/NewPostForm\"; // Importing a form component for creating a new post\nimport { submitNewPost } from \"../lib/api\"; // Importing a function for submitting a new post\nimport AuthContext from \"../store/auth-context\"; // Importing authentication context\nimport Banner from \"../Components/Banner\"; // Importing a banner component for displaying messages\nimport { useNavigate } from \"react-router-dom\"; // Importing a hook for navigation\nimport { useTranslation } from \"react-i18next\"; // Importing a hook for translation\n\nconst NewPostPage = (props) => {\n  // State variables\n  const [isSubmitted, setIsSubmitted] = useState(false); // State for tracking if the form is submitted\n  const [newPostId, setNewPostId] = useState(null); // State for storing the ID of the newly created post\n\n  // Context and hooks\n  const authContext = useContext(AuthContext); // Accessing authentication context\n  const navigate = useNavigate(); // Getting the navigation function from React Router\n  const { t } = useTranslation(); // Using translation hook for internationalization\n\n  // Function to handle form submission\n  const onSubmit = (newPost, formikHelpers) => {\n    submitNewPost(newPost, authContext.token) // Calling the API function to submit new post\n      .then((post) => {\n        setTimeout(() => {\n          setNewPostId(post.id); // Setting the ID of the newly created post\n          setIsSubmitted(true); // Setting form submission status to true\n        }, 2000);\n      })\n      .catch((error) => {\n        console.log(error); // Logging any errors that occur during submission\n      })\n      .finally(() => {\n        setTimeout(() => {\n          formikHelpers.setSubmitting(false); // Resetting form submission status after submission attempt\n        }, 2000);\n      });\n  };\n\n  // Effect to navigate to the newly created post after submission\n  useEffect(() => {\n    setTimeout(() => {\n      if (isSubmitted) {\n        setIsSubmitted(false); // Resetting form submission status\n        navigate(`/post/${newPostId}`); // Navigating to the newly created post\n      }\n    }, 2000); // Delaying navigation for 2 seconds\n  }, [isSubmitted]); // Running effect when isSubmitted state changes\n\n  return (\n    <Container>\n      <Row\n        className=\"py-4 d-flex flex-column justify-content-center\"\n        style={{\n          marginTop: props.headerHeight, // Using props to adjust top margin based on header height\n          marginBottom: props.footerHeight, // Using props to adjust bottom margin based on footer height\n        }}\n      >\n        {/* Rendering the new post form component */}\n        <NewPostForm isSubmitted={isSubmitted} onSubmit={onSubmit} />\n        {/* Rendering a banner if form is submitted successfully */}\n        {isSubmitted && (\n          <Banner\n            className=\"text-success border-success mt-4\"\n            message={`${t(\"addedBy\", { type: \"post\" })} ${\n              authContext.userName\n            }`}\n          />\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default NewPostPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
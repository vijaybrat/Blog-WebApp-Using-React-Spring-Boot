{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Appliction\\\\Final Maven Project\\\\ApnaBlogFrontEnd\\\\src\\\\Pages\\\\RegisterPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { register } from \"../lib/api\"; // Importing API function for user registration\n\nimport RegistrationForm from \"../Components/Forms/RegistrationForm\"; // Importing registration form component\n\nimport { useNavigate } from \"react-router-dom\"; // Importing hook for navigation\n\nimport Banner from \"../Components/Banner\"; // Importing banner component for displaying messages\n\nimport { useTranslation } from \"react-i18next\"; // Importing translation hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterPage = props => {\n  _s();\n\n  // State variables\n  const [isRegistrationSuccess, setIsRegistrationSuccess] = useState(false); // State for tracking registration success\n\n  const [registrationMessage, setRegistrationMessage] = useState(\"\"); // State for storing registration message\n\n  const navigate = useNavigate(); // Getting navigation function from React Router\n\n  const {\n    t\n  } = useTranslation(); // Using translation hook for internationalization\n  // Effect to navigate to login page after successful registration\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (isRegistrationSuccess) {\n        setIsRegistrationSuccess(false); // Resetting registration success status\n\n        navigate(\"/login\"); // Navigating to login page\n      }\n    }, 2000); // Delaying navigation for 2 seconds\n  }, [isRegistrationSuccess]); // Running effect when isRegistrationSuccess state changes\n  // Function to handle form submission for user registration\n\n  const onSubmit = (values, formikHelpers) => {\n    setTimeout(() => {\n      register(values).then(data => {\n        formikHelpers.resetForm(); // Resetting form fields\n\n        setRegistrationMessage( // Setting registration success message\n        t(\"newUserCreated\", {\n          newUser: data.userName\n        }));\n        setIsRegistrationSuccess(true); // Setting registration success status to true\n      }).catch(error => {\n        formikHelpers.setFieldError( // Setting form field error if registration fails\n        \"register\", t(\"userAlreadyExists\", {\n          userName: error.message\n        }));\n      }).finally(() => {\n        formikHelpers.setSubmitting(false); // Resetting form submission status\n      });\n    }, 1000); // Delaying form submission for 1 second\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"\",\n    style: {\n      marginTop: \"170px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"py-4 d-flex flex-column align-content-center\",\n      style: {\n        marginTop: props.headerHeight,\n        // Adjusting top margin based on header height\n        marginBottom: props.footerHeight // Adjusting bottom margin based on footer height\n\n      },\n      children: [/*#__PURE__*/_jsxDEV(RegistrationForm, {\n        isSubmitted: isRegistrationSuccess,\n        onSubmit: onSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), isRegistrationSuccess && /*#__PURE__*/_jsxDEV(Banner, {\n        className: \"text-success border-success mt-4\",\n        message: registrationMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterPage, \"TN2y4jySSoY/HTtQoyTEZoCTKrs=\", false, function () {\n  return [useNavigate, useTranslation];\n});\n\n_c = RegisterPage;\nexport default RegisterPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterPage\");","map":{"version":3,"names":["React","useEffect","useState","Container","Row","register","RegistrationForm","useNavigate","Banner","useTranslation","RegisterPage","props","isRegistrationSuccess","setIsRegistrationSuccess","registrationMessage","setRegistrationMessage","navigate","t","setTimeout","onSubmit","values","formikHelpers","then","data","resetForm","newUser","userName","catch","error","setFieldError","message","finally","setSubmitting","marginTop","headerHeight","marginBottom","footerHeight"],"sources":["E:/React Appliction/Final Maven Project/ApnaBlogFrontEnd/src/Pages/RegisterPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { register } from \"../lib/api\"; // Importing API function for user registration\nimport RegistrationForm from \"../Components/Forms/RegistrationForm\"; // Importing registration form component\nimport { useNavigate } from \"react-router-dom\"; // Importing hook for navigation\nimport Banner from \"../Components/Banner\"; // Importing banner component for displaying messages\nimport { useTranslation } from \"react-i18next\"; // Importing translation hook\n\nconst RegisterPage = (props) => {\n  // State variables\n  const [isRegistrationSuccess, setIsRegistrationSuccess] = useState(false); // State for tracking registration success\n  const [registrationMessage, setRegistrationMessage] = useState(\"\"); // State for storing registration message\n  const navigate = useNavigate(); // Getting navigation function from React Router\n  const { t } = useTranslation(); // Using translation hook for internationalization\n\n  // Effect to navigate to login page after successful registration\n  useEffect(() => {\n    setTimeout(() => {\n      if (isRegistrationSuccess) {\n        setIsRegistrationSuccess(false); // Resetting registration success status\n        navigate(\"/login\"); // Navigating to login page\n      }\n    }, 2000); // Delaying navigation for 2 seconds\n  }, [isRegistrationSuccess]); // Running effect when isRegistrationSuccess state changes\n\n  // Function to handle form submission for user registration\n  const onSubmit = (values, formikHelpers) => {\n    setTimeout(() => {\n      register(values)\n        .then((data) => {\n          formikHelpers.resetForm(); // Resetting form fields\n          setRegistrationMessage( // Setting registration success message\n            t(\"newUserCreated\", { newUser: data.userName })\n          );\n          setIsRegistrationSuccess(true); // Setting registration success status to true\n        })\n        .catch((error) => {\n          formikHelpers.setFieldError( // Setting form field error if registration fails\n            \"register\",\n            t(\"userAlreadyExists\", { userName: error.message })\n          );\n        })\n        .finally(() => {\n          formikHelpers.setSubmitting(false); // Resetting form submission status\n        });\n    }, 1000); // Delaying form submission for 1 second\n  };\n\n  return (\n    <Container className=\"\" style={{marginTop:\"170px\" }}>\n      <Row\n        className=\"py-4 d-flex flex-column align-content-center\"\n        style={{\n          marginTop: props.headerHeight, // Adjusting top margin based on header height\n          marginBottom: props.footerHeight, // Adjusting bottom margin based on footer height\n        }}\n      >\n        {/* Rendering the registration form component */}\n        <RegistrationForm\n          isSubmitted={isRegistrationSuccess}\n          onSubmit={onSubmit}\n        />\n        {/* Displaying banner if registration is successful */}\n        {isRegistrationSuccess && (\n          <Banner\n            className=\"text-success border-success mt-4\"\n            message={registrationMessage}\n          />\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default RegisterPage;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,iBAA/B;AACA,SAASC,QAAT,QAAyB,YAAzB,C,CAAuC;;AACvC,OAAOC,gBAAP,MAA6B,sCAA7B,C,CAAqE;;AACrE,SAASC,WAAT,QAA4B,kBAA5B,C,CAAgD;;AAChD,OAAOC,MAAP,MAAmB,sBAAnB,C,CAA2C;;AAC3C,SAASC,cAAT,QAA+B,eAA/B,C,CAAgD;;;;AAEhD,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAC9B;EACA,MAAM,CAACC,qBAAD,EAAwBC,wBAAxB,IAAoDX,QAAQ,CAAC,KAAD,CAAlE,CAF8B,CAE6C;;EAC3E,MAAM,CAACY,mBAAD,EAAsBC,sBAAtB,IAAgDb,QAAQ,CAAC,EAAD,CAA9D,CAH8B,CAGsC;;EACpE,MAAMc,QAAQ,GAAGT,WAAW,EAA5B,CAJ8B,CAIE;;EAChC,MAAM;IAAEU;EAAF,IAAQR,cAAc,EAA5B,CAL8B,CAKE;EAEhC;;EACAR,SAAS,CAAC,MAAM;IACdiB,UAAU,CAAC,MAAM;MACf,IAAIN,qBAAJ,EAA2B;QACzBC,wBAAwB,CAAC,KAAD,CAAxB,CADyB,CACQ;;QACjCG,QAAQ,CAAC,QAAD,CAAR,CAFyB,CAEL;MACrB;IACF,CALS,EAKP,IALO,CAAV,CADc,CAMJ;EACX,CAPQ,EAON,CAACJ,qBAAD,CAPM,CAAT,CAR8B,CAeD;EAE7B;;EACA,MAAMO,QAAQ,GAAG,CAACC,MAAD,EAASC,aAAT,KAA2B;IAC1CH,UAAU,CAAC,MAAM;MACfb,QAAQ,CAACe,MAAD,CAAR,CACGE,IADH,CACSC,IAAD,IAAU;QACdF,aAAa,CAACG,SAAd,GADc,CACa;;QAC3BT,sBAAsB,EAAE;QACtBE,CAAC,CAAC,gBAAD,EAAmB;UAAEQ,OAAO,EAAEF,IAAI,CAACG;QAAhB,CAAnB,CADmB,CAAtB;QAGAb,wBAAwB,CAAC,IAAD,CAAxB,CALc,CAKkB;MACjC,CAPH,EAQGc,KARH,CAQUC,KAAD,IAAW;QAChBP,aAAa,CAACQ,aAAd,EAA6B;QAC3B,UADF,EAEEZ,CAAC,CAAC,mBAAD,EAAsB;UAAES,QAAQ,EAAEE,KAAK,CAACE;QAAlB,CAAtB,CAFH;MAID,CAbH,EAcGC,OAdH,CAcW,MAAM;QACbV,aAAa,CAACW,aAAd,CAA4B,KAA5B,EADa,CACuB;MACrC,CAhBH;IAiBD,CAlBS,EAkBP,IAlBO,CAAV,CAD0C,CAmBhC;EACX,CApBD;;EAsBA,oBACE,QAAC,SAAD;IAAW,SAAS,EAAC,EAArB;IAAwB,KAAK,EAAE;MAACC,SAAS,EAAC;IAAX,CAA/B;IAAA,uBACE,QAAC,GAAD;MACE,SAAS,EAAC,8CADZ;MAEE,KAAK,EAAE;QACLA,SAAS,EAAEtB,KAAK,CAACuB,YADZ;QAC0B;QAC/BC,YAAY,EAAExB,KAAK,CAACyB,YAFf,CAE6B;;MAF7B,CAFT;MAAA,wBAQE,QAAC,gBAAD;QACE,WAAW,EAAExB,qBADf;QAEE,QAAQ,EAAEO;MAFZ;QAAA;QAAA;QAAA;MAAA,QARF,EAaGP,qBAAqB,iBACpB,QAAC,MAAD;QACE,SAAS,EAAC,kCADZ;QAEE,OAAO,EAAEE;MAFX;QAAA;QAAA;QAAA;MAAA,QAdJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD,CAhED;;GAAMJ,Y;UAIaH,W,EACHE,c;;;KALVC,Y;AAkEN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}